[build-system]
requires = [ "setuptools",]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-validation"
version = "2.0.0"
description = "Data description and validation for CKAN with Frictionless Data tools."
classifiers = [ "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",]
keywords = [ "CKAN", "extension", "validation",]
dependencies = [ "typing_extensions",]
authors = [
    {name = "Open Knowledge Foundation", email = "info@okfn.org"},
    {name = "Adrià Mercader (amercader)", email = "amercadero@gmail.com"},
    {name = "Jesse Vickery (JVickery-TBS)", email = "jesse.vickery@tbs-sct.gc.ca"},
    {name = "Edgar Z. Alvarenga (aivuk)"},
    {name = "ThrawnCA", email = "carl.antuar@smartservice.qld.gov.au"},
    {name = "William Dutton (duttonw)", email = "william.dutton@qld.gov.au"},
#    {name = "", email = ""},
]
maintainers = [
    {name = "Open Knowledge Foundation", email = "info@okfn.org"},
    {name = "Adrià Mercader (amercader)", email = "amercadero@gmail.com"},
    {name = "William Dutton (duttonw)", email = "william.dutton@qld.gov.au"},
    {name = "ThrawnCA", email = "carl.antuar@smartservice.qld.gov.au"},
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "AGPL"

[project.urls]
Homepage = "https://github.com/ckan/ckanext-validation"

[project.optional-dependencies]
test = [ "pytest-factoryboy",]

[project.entry-points."ckan.plugins"]
validation = "ckanext.validation.plugin:ValidationPlugin"

[project.entry-points."ckan.test_plugins"]
test_validation_plugin = "ckanext.validation.tests.test_interfaces:TestPlugin"

[project.entry-points."ckan.paster_command"]
validation = "ckanext.validation.commands:Validation"

[project.entry-points."babel.extractors"]
ckan = "ckan.lib.extract:extract_ckan"

[tool.setuptools.packages]
find = {}

[tool.black]
line-length = 79
preview = true

[tool.isort]
known_ckan = "ckan"
known_ckanext = "ckanext"
known_self = "ckanext.validation"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,CKAN,CKANEXT,SELF,LOCALFOLDER"

[tool.pytest.ini_options]
addopts = "--ckan-ini test.ini"
filterwarnings = [
               "ignore::sqlalchemy.exc.SADeprecationWarning",
               "ignore::sqlalchemy.exc.SAWarning",
               "ignore::DeprecationWarning",
]

[tool.pyright]
pythonVersion = "3.7"
include = ["ckanext"]
exclude = [
    "**/test*",
    "**/migration",
]
strict = []

strictParameterNoneValue = true # type must be Optional if default value is None

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # We are using Context in a way that conflicts with this check
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only (like logic.check_acces)
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false # authenticator relies on repoze.who class-decorator
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true